#version 450 core
#include "declarations.glsl"

layout(local_size_x = 32) in;

layout(std140, binding = 0) uniform UniformBlock {
    GenMeshUniforms ubo;
};

layout(std430, binding = 1) readonly buffer IndirectBlock {
    Indirect indirect[];
} mesh_indirect;

struct Sphere {
    vec3 center;
    float radius;
};
layout(std430, binding = 2) buffer BoundingBlock {
    Sphere bounds[];
} mesh_bounding;

struct Entry {
    vec3 position;
    uint albedo;
    float angle;
    float height;
    uint uv;
    float padding;
};
layout(std430, binding = 3) readonly buffer DataBlock {
    Entry entries[];
} tree_billboards_storage;

shared vec3 min_positions[32];
shared vec3 max_positions[32];
shared float max_radius2[32];

shared vec3 center;

void main() {
    // uint storage_slot = ubo.storage_base_entry + gl_WorkGroupID.x;
    // uint mesh_slot = ubo.mesh_base_entry + gl_WorkGroupID.x;

    // uint max_index = mesh_indirect.indirect[storage_slot].vertex_count / 6;

    // vec3 position = tree_billboards_storage.entries[storage_slot*16384 + gl_LocalInvocationID.x].position;
    // min_positions[gl_LocalInvocationID.x] = position;
    // max_positions[gl_LocalInvocationID.x] = position;

    // for (int i = 32; i < 128*128; i += 32) {
    //     if (i + gl_LocalInvocationID.x < max_index) {
    //         position = tree_billboards_storage.entries[storage_slot*16384 + gl_LocalInvocationID.x + i].position;
    //         min_positions[gl_LocalInvocationID.x] = min(min_positions[gl_LocalInvocationID.x], position);
    //         max_positions[gl_LocalInvocationID.x] = max(max_positions[gl_LocalInvocationID.x], position);
    //     }
    // }

    // barrier();

    // if (gl_LocalInvocationID.x == 0) {
    //     for (int i = 1; i < 32; i++) {
    //         min_positions[0] = min(min_positions[0], min_positions[gl_LocalInvocationID.x]);
    //         max_positions[0] = max(max_positions[0], max_positions[gl_LocalInvocationID.x]);
    //     }
    //     center = (min_positions[0] + max_positions[0]) * 0.5;
    // }

    // barrier();

    // max_radius2[gl_LocalInvocationID.x] = 0;
    // for (int i = 0; i < 32*32; i += 32) {
    //     if (i + gl_LocalInvocationID.x < max_index) {
    //         vec3 v = tree_billboards_storage.entries[storage_slot*1024 + gl_LocalInvocationID.x + i].position - center;
    //         float radius2 = dot(v, v);
    //         max_radius2[gl_LocalInvocationID.x] = max(max_radius2[gl_LocalInvocationID.x], radius2);
    //     }
    // }

    // barrier();

    // if (gl_LocalInvocationID.x == 0) {
    //     for (int i = 1; i < 32; i++) {
    //         max_radius2[0] = max(max_radius2[0], max_radius2[gl_LocalInvocationID.x]);
    //     }
    //     mesh_bounding.bounds[mesh_slot].center = center;
    //     mesh_bounding.bounds[mesh_slot].radius = sqrt(max_radius2[0]) + 400.0;
    // }
}