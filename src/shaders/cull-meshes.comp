#version 450 core
#include "declarations.glsl"

layout(local_size_x = 64) in;

layout(set = 0, binding = 0, std140) uniform GlobalBlock {
    Globals globals;
};
layout(set = 0, binding = 1, std140) readonly buffer Nodes {
	Node nodes[];
};

/*coherent*/ layout(std430, binding = 2) buffer IndirectBlock {
    Indirect indirect[];
} mesh_indirect;

struct Sphere {
    vec3 center;
    float radius;
};
layout(std430, binding = 3) buffer BoundingBlock {
    Sphere bounds[];
} mesh_bounding;

struct NodeEntry {
    vec3 relative_position;
    uint valid;
};
layout(set = 0, binding = 4, std140) uniform UniformBlock {
    uint base_entry;
    uint num_nodes;
    uint entries_per_node;
    uint base_slot;
    uint mesh_index;
} ubo;

void main() {
    if (gl_GlobalInvocationID.x > ubo.num_nodes * ubo.entries_per_node)
        return;

    uint entry = ubo.base_entry + gl_GlobalInvocationID.x;
    mesh_indirect.indirect[entry].base_instance = ubo.base_slot * ubo.entries_per_node + gl_GlobalInvocationID.x;
    Node node = nodes[ubo.base_slot + gl_GlobalInvocationID.x / ubo.entries_per_node];

    if ((node.mesh_valid_mask[ubo.mesh_index] & (1 << (gl_GlobalInvocationID.x % ubo.entries_per_node))) == 0) {
        mesh_indirect.indirect[entry].instance_count = 0;
        return;
    }

    Sphere sphere = mesh_bounding.bounds[entry];
    float d0 = dot(sphere.center.xyz - node.relative_position, globals.frustum_planes[0].xyz) + globals.frustum_planes[0].w;
    float d1 = dot(sphere.center.xyz - node.relative_position, globals.frustum_planes[1].xyz) + globals.frustum_planes[1].w;
    float d2 = dot(sphere.center.xyz - node.relative_position, globals.frustum_planes[2].xyz) + globals.frustum_planes[2].w;
    float d3 = dot(sphere.center.xyz - node.relative_position, globals.frustum_planes[3].xyz) + globals.frustum_planes[3].w;
    float d4 = dot(sphere.center.xyz - node.relative_position, globals.frustum_planes[4].xyz) + globals.frustum_planes[4].w;

    // if ((d0 < -sphere.radius) ||
    //     (d1 < -sphere.radius) ||
    //     (d2 < -sphere.radius) ||
    //     (d3 < -sphere.radius) ||
    //     (d4 < -sphere.radius)) {
    //     mesh_indirect.indirect[entry].instance_count = 0;
    // } else {
        mesh_indirect.indirect[entry].instance_count = 1;
    // }
}